import { z } from "zod"

// Schema para dados do usu√°rio
export const userProfileSchema = z.object({
  name: z.string().min(1, "Nome √© obrigat√≥rio").max(100, "Nome muito longo"),
  nickname: z.string().min(1, "Apelido √© obrigat√≥rio").max(50, "Apelido muito longo"),
  email: z.string().email("E-mail inv√°lido"),
  bio: z.string().min(1, "Bio √© obrigat√≥ria").max(500, "Bio muito longa"),
  powerAnimal: z.string().min(1, "Animal de poder √© obrigat√≥rio"),
  zodiacSign: z.string().optional(),
  spiritualJourney: z.string().optional(),
  experience: z.string().optional(),
  relationshipStatus: z.string().optional(),
  preference: z.string().min(1, "Prefer√™ncia √© obrigat√≥ria"),
  secondaryAnimals: z.array(z.string()).default([]),
  birthDate: z.string().optional(),
  ayahuascaExperience: z.string().optional(),
  stats: z.object({
    totalEntries: z.number().default(0),
    totalConsagracoes: z.number().default(0),
    totalReflexoes: z.number().default(0),
    streakDays: z.number().default(0),
    lastActivity: z.string()
  })
})

// Schema para altera√ß√£o de senha
export const changePasswordSchema = z.object({
  currentPassword: z.string().min(1, "Senha atual √© obrigat√≥ria"),
  newPassword: z.string().min(6, "Nova senha deve ter pelo menos 6 caracteres"),
  confirmPassword: z.string().min(1, "Confirma√ß√£o de senha √© obrigat√≥ria"),
}).refine((data) => data.newPassword === data.confirmPassword, {
  message: "Senhas n√£o coincidem",
  path: ["confirmPassword"],
})

// Schema para prefer√™ncias de notifica√ß√£o
export const notificationPreferencesSchema = z.object({
  reminderNotifications: z.boolean().default(true),
  eventNotifications: z.boolean().default(true),
  publicProfile: z.boolean().default(false),
  dataSharing: z.boolean().default(true),
})

// Tipos inferidos dos schemas
export type UserProfileData = z.infer<typeof userProfileSchema>
export type ChangePasswordData = z.infer<typeof changePasswordSchema>
export type NotificationPreferencesData = z.infer<typeof notificationPreferencesSchema>

// Schema para estat√≠sticas do usu√°rio
export const userStatsSchema = z.object({
  totalEntries: z.number(),
  totalConsagracoes: z.number(),
  totalReflexoes: z.number(),
  streakDays: z.number().default(0),
  lastActivity: z.string().datetime(),
})

export type UserStatsData = z.infer<typeof userStatsSchema>

// Op√ß√µes para selects
export const animalOptions = [
  { value: "√Åguia", label: "ü¶Ö √Åguia - Vis√£o e liberdade" },
  { value: "Lobo", label: "üê∫ Lobo - Lealdade e intui√ß√£o" },
  { value: "On√ßa", label: "üêÜ On√ßa - For√ßa e mist√©rio" },
  { value: "Serpente", label: "üêç Serpente - Transforma√ß√£o" },
  { value: "Jaguar", label: "üêÜ Jaguar - Poder e mist√©rio" },
  { value: "Condor", label: "ü¶Ö Condor - Espiritualidade" },
  { value: "Outro", label: "üåü Outro animal" },
]

export const civilStatusOptions = [
  { value: "Solteiro(a)", label: "Solteiro(a)" },
  { value: "Casado(a)", label: "Casado(a)" },
  { value: "Relacionamento Aberto", label: "Relacionamento Aberto" },
  { value: "Dispon√≠vel", label: "Dispon√≠vel" },
  { value: "Uni√£o Est√°vel", label: "Uni√£o Est√°vel" },
  { value: "Divorciado(a)", label: "Divorciado(a)" },
  { value: "Vi√∫vo(a)", label: "Vi√∫vo(a)" },
]

export const preferenceOptions = [
  { value: "Homem", label: "Homem" },
  { value: "Mulher", label: "Mulher" },
  { value: "Todos os humanos", label: "Todos os humanos" },
  { value: "N√£o-bin√°rio", label: "N√£o-bin√°rio" },
]
